
% attempt to print out all the unicode characters
const SYSCALL_WRITE = 1
const STDOUT = 1


buf = 0 % makes a 64-bit buffer, we will treat as 8 bytes
addr = #alloc8(8)

% amounts to shift to put the byte into our 64-bit buffer
b0_offset = 0
b1_offset = 8
b2_offset = 16
b3_offset = 24


loop i in 0x1F600..0x1F64F {
    if i <=? 0x7F (
        buf = i << b0_offset
        size = 1
    )
    else if i <=? 0x7FF (
        size = 2
        buf = ((0xC0 | (i >> 6))   << b0_offset) |
              ((0x80 | (i & 0x3F)) << b1_offset)
    )
    else if i <=? 0xFFFF (
        size = 3
        buf = ((0xE0 | (i >> 12))         << b0_offset) |
              ((0x80 | ((i >> 6) & 0x3F)) << b1_offset) |
              ((0x80 | (i & 0x3F))        << b2_offset)
    )
    else (
        size = 4
        buf = ((0xF0 | (i >> 18))          << b0_offset) |
              ((0x80 | ((i >> 12) & 0x3F)) << b1_offset) |
              ((0x80 | ((i >> 6) & 0x3F))  << b2_offset) |
              ((0x80 | (i & 0x3F))         << b3_offset)
    )

    #storel(buf addr)
    __syscall3__(SYSCALL_WRITE STDOUT addr size)
}