

% TODO: make this handle large numbers close to the max int64 value (e.g. because place will overflow)
% also what if number is INT64_MIN? multiplying by -1 will overflow
% INT64_MIN = -9_223_372_036_854_775_808
% INT64_MAX = 9_223_372_036_854_775_807
put_int = x:int64 => {
    const SYSCALL_WRITE = 1
    const STDOUT = 1
    if x <? 0 {
        __syscall3__(SYSCALL_WRITE STDOUT '-' 1)
        x = -x
    }

    let place = 1
    loop place*10 <? x place*=10
    loop place >? 0 {
        let d = x // place
        x mod= place
        place //= 10

        zero = '0'
        buf = #alloc8(1)
        val = #loadub(zero) 
        val += d  % TODO: can't do `#loadub(zero) + d` yet because typeof isn't implemented on Builtin
        #storeb(val buf)
        __syscall3__(SYSCALL_WRITE STDOUT buf 1)
    }
}
putl = () => __syscall3__(1 1 '\n' 1);  % semicolon is needed so the negative is interpreted as a prefix operator rather than a binary operator

-1234567890 |> put_int
putl
0xffff |> put_int
putl