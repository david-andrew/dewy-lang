% simplest case
x = 10
plus_5 = () => x + 5
printl(plus_5())

% taking in args
x = 12
my_closure = y => x + y
printl(my_closure(-5))


% returning a closure from a child scope
a = 13
my_closure = {
    b = 10
    fn = c => a + b + c % uses `b` from this scope and `a` from parent scope
    @fn
}
printl(my_closure(5))



% print the handle to the closure itself
printl(@my_closure)
printl(@printl)


% some pathological cases
my_print = {
    x = 5
    s = 'string with internal reference to x={x}'
    @printl(s)
}
my_print


my_print = {
    my_str = {
        x = 5
        s = 'string with internal reference to x={x}'
        s
    }
    fn = @printl(my_str)
    @fn
}
my_print



% Very deeply nested closures combined with partial evaluation
X = 'xpple'
Y = 'yanana'
fn = {
    Z = 'zeach'
    fn = {
        A = () => '@Apricot'
        fn = {
            B = () => '@Blueberry'
            fn = {
                fn = (x y z a b c d) => {
                    printl'x="{x}"\ny="{y}"\nz="{z}"\na="{a}"\nb="{b}"\nc="{c}"\nd="{d}"'
                }
                @fn
            }
            printl'fn={@fn}'
            @fn(b=B) % note just B should evaluate the string on calling fn
        }
        printl'fn={@fn}'
        @fn(a=@A)  % note that @A should evaluate the string inside of the IString
    }
    printl'fn={@fn}'
    @fn(z=Z d='manually assigning D' c='unused C')
}
printl'fn={@fn}'
fn = @fn(y=Y x=X)
printl'fn={@fn}'
fn = @fn(c='C')
printl'fn={@fn}'
printl(@fn)
fn
printl()
printl(@fn(c='a different C'))
fn(c='an even more different C')