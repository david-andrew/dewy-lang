//lots of examples of different operators for testing parsing precedences
4y
(2+3)(x*2)
push[1 2 3 4 5]
10 20 30 40 50
a b c d e
-x(y)
(-x)y
-x^2        // 0-x^2
/x^2        // 1/x^2
/x-2        // 1/x-2
-x/2        // 0-x/2
25-/2       // 25-1/2
25+-/2      // 25+0-1/2
2^/-+*32    // 2^(1/(0-(0+(1*32))))
-x(y)(z)
/x(y)(z)
add(2 3)result
a(x)b(x)
4, 5, 6
"apple", "banana", "cherry"
((3+5)^2(2*3))
((x+y)*z)
3 + 5 * 2
10 / 2 - 3
2 ^ 3 mod 7
true and false or true
false nand true xor false
x =? 5
10 >? y
z <? 20
a >=? 15
b <=? 30
(x+3).length
(y * z).size
arr1 .* 2
arr2 .+ 5
result: int
age: float
1..5
[0..10)
[1, 3..15]
(3..7]
+3
-x
not y
@z
3?
x;
y...
x*+3
y/-4
z^/2
w^@3
(2x + 5)(3y - 4)
3a^2 - 4b + 5, 6c - 7
(-x * y / 2).length * (z+5)
print[1 2 3]x*2
(3+5, 2*3)range[0..10)
function(x: int y: float): str
a =? 5 and b >=? 10
(sum[1 2 3] + product[4 5 6]) * 7
true xor (false or y >=? 3)
(((3 + 2x).area, y^2 * 10), (a, b, c))
[1, 3..9] .* (x+3)
myFunc = (age: int name: string): bool => age >=? 18
(x^2 + y^2)^(1/2).magnitude
if (a >? b) and (c <=? d) result = 1 else result = 0
(4x^2 - 2, y+1 .^ 3, z^/4).product
(((10..20, 25..30) .+ 5), (x-3..x+3))
obj.method1(3)method2(x*y "str").property
not a =? b or c <? d nand e >=? f
sum[0, 2..10] * product[-5..5]/@2

//shift operators
3 << 2
x >> 4
7 <<< 3
y >>> 1
12 <<! 5
z !>> 2
3 + 5 << 2
x * 4 >> 3
7 - 3 <<< 1
y >>> 1 * 6
12 + 3 <<! 2
z !>> 2 / 4
a << 2 + b >> 3
x << 2 * y >>> 1
(3 << 2) + 5
(x >> 4) - 7y
(((5 + 3) <<< 2) * 2, 8 >>> 3)
if (a =? 5) and (b << 2 >? 16) result = 1 else result = 0
(x+3).length << 2
product[2 4 6] <<! 3
(4 <<< 2, y >>> 1, z+1 >> 3)
sum[1, 3..9] .* (x+3 << 1)
(a >>> b) nand (c <<! d)
((5 - 3) << 1, (10 * 2) >> 3, (15 / 3) <<< 2)
(((10..20, 25..30) .+ 5) << 1, (x-3..x+3) >>> 2)
obj.method1(3 << 2)method2(x*y >>> 1 "str").property
not a =? b or c << 2 <? d >>> 3
range[0, 2..10] * product[-5..5] >> 3

//TODO opchaining
10^/-2

// weird syntax but technically not a syntax error. possibly a type error though
myvec[0,2..(4) [1..4) 1,3..]
myvec[0,3..end [1..3) [1,2 4,5]]
myvec[1,2,3 (0..end) [1,3..end)]

// lots of range examples
[1 .. 5]
[1 ..5]
[1.. 5]
[1..5]
myvec[() [5 6] 3..]
myvec[1.. [1..3)]
myvec[[0 2] [1 3]]
myvec[() 0,3..end 1,4]
myvec[0..3 2..5]
myvec[[0 2 4] 1..4 1,3..]
myvec[0,3..end [1..3) [1 2 4 5]]
myvec[1,2,3 [0..end) [1,3..end]]
myvec[1 2 3 [0..end) [1,3..end]]
myvec[() 0,3..end [1 4]]
myvec[0,2..end 1..4 [0 2 4]]
myvec[() 1..end 0,2..]
myvec[[0 2 4] [1 3 5] (0..end) [3..6]]
myvec[0,2.. [1..4) [1 3 5]]
myvec[[0 3] [1 4] (0..end)]

// optional commas
myvec[0,2..end 1..4 [0 2 4]]
myvec[0 (1,3..end)]
myvec[(0,2..end)]
myvec(0,2..end)
myvec[(0,2..end) [1 3 5]]
myvec[[0,2..end) [1,3..end)]

// mathy range indices
myvec[0..(end-1) (1,3..end/2)]
myvec[(0,2*sqrt(2)..end) [1 3 5].*2]
myvec[(0..end*0.75) 1..(end-2)]
myvec[(1+1,2*2..end-1) [1 3 5] .- 1]
myvec[(-3,3..end*0.9) [1 3] .* (end/2)]
myvec[(0..end-1)/2 2..(end*0.5)]
myvec[(0,3*sin(pi/3)..end-1) [1 3] + end/4]


//TODO: how to handle the fact that juxtapose has different precedence based on if its a function call vs a multiply?
sin(x)^2 + cos(x)^2  //-> exponent after function call
sin = 2 cos = 3
sin(x)^2 + cos(x)^2  //-> exponent before multiply...

2x^2 + 3x + 4
2(x)^2 + 3(x) + 4



//physical number expressions TODO: clean/remove invalid ones
15kg
7(kg) * 10(m/s/s)
25(N/m^2) + 15(Pa)
12(kg) + 8(kg)
3(m) * 5(s)
25(J) - 15(J)
9(N) * 6(m)
1500(W) / 10(A)
5(A) * 2(Ω)
8(ms^-1) / 2(s)
40(Nm) * 10(rad)
200(Pa) * 3(m^2)
1000(m^3) * 2(kg/m^3)
20(J/s) * 4(s)
8(km/h) + 20(m/s)
6(N) / 2(m^2)
18(L) * 0.001(m^3/L)
1000(kg) * 9.8(m/s^2)
12(C) * 1.6 x 10^-19(C)
0.5(kg) * (10(m/s))^2
1200(W) / 240(V)
6000(s) / 3600(s/h)
7.5(mol) * 6.022 x 10^23(particles/mol)
15(kg * m^2 * s^-1 * A^-2 * K^2 * mol^-1 * cd^3) + 10(kg * m * s^-2 * A^-1 * K * mol^-2 * cd^2)
20(m^3 * kg^-2 * s^3 * A * K^-1 * mol^2 * cd^-3) / 4(m^3 * kg^-1 * s^2 * A * K^-2 * mol * cd^-3)
25(kg * m^5 * s^-4 * A^-3 * K^2 * mol^-2 * cd^3) * 12(kg * m^4 * s^-3 * A^-2 * K * mol^-1 * cd^2)
8(kg^2 * m^-2 * s^3 * A^-1 * K^-1 * mol^2 * cd^-2) / 2(kg * m^-1 * s^2 * A^-1 * K^-1 * mol * cd^-1)
40(kg * m^-1 * s^4 * A^2 * K^-2 * mol^-3 * cd) * 10(kg * m^-2 * s^3 * A * K^-1 * mol^-2 * cd)

2pi(r)rad


F = 5kg * 2(m/s^2) // 10 N
W = 20N * 10m * cos(45°) // 141.42 J
V = 2A * 10Ω // 20 V
P = 12V * 5A // 60 W
KE = 0.5 * 8kg * (6(m/s))^2 // 144 J
U = 75kg * 9.81(m/s^2) * 5m // 3678.75 J
F = 200(N/m) * 0.05m // 10 N
Q = 385(W/(m * K)) * 1m^2 * (100°C - 25°C) * 3600s / 0.01m // 990000 J
P = (2mol * 8.314(J/(mol * K)) * 300K) / 0.01m^3 // 498420 Pa
ρ = 50kg / 0.1m^3 // 500 kg/m^3


time.sleep(100ms)


// Complex numbers and quaternions
1 + 2i
3 + 4i
5 - 2i
1.2 + 7.8i
3.5e3 - 2.1e2i
-3.6 - 4.7i
a + bi
x - yi
r(cos(θ) + i(sin(θ)))
(a + b)i + (c - d)i^2
1 + 2i + 3j + 4k
-1 - 0.5i + 3.4j - 1.2k
7e2 + 4e-2i + 2.5e3j + 1.2e1k
a(i) + b(j) + c(k) + d
(a)i + (b)j + (c)k + d
x + (y)i + (z + (w)i)j
(2 + 3i) + (4 + 5i)j + (6 + 7i)k
(r1 + (s1)i) + (r2 + (s2)i)j + (r3 + (s3)i)k + t
(p + (q)i) + (r + (s)i)j + (t + (u)i)k + v
