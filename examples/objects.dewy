obj = [
    let a = 5
    let b = 10
    let fn = () => a + b
    let fn2 = x => (a + b) * x
]

printl(obj)
printl(obj.a)
printl(obj.b)
printl(obj.fn)
%printl(obj.fn2(5)) % parse issue with . and call() currently causing ambiguity


something_global = 42

obj2 = [
    let A = [
        let x = 5
        let y = 10
        let fn = () => x + y
    ]
    let B = (X Y) => [
        let x = X
        let y = Y
        let fn = () => x + y
    ]
    let C = A.fn + (B(5 10)).fn
]


printl(obj2)
printl(obj2.A)
printl(obj2.A.x)
printl(obj2.A.y)
printl(obj2.A.fn)
printl(obj2.@B)
%TODO: fix parse issue causing needing extra parenthesis/@ for disambiguation here
printl((obj2.@B)(5 10))
printl(((obj2.@B)(3 4)).x)
printl(((obj2.@B)(6 7)).y)
printl(((obj2.@B)(8 9)).fn)
printl(obj2.C)

% can't access members not in the direct object scope
%printl(obj.something_global)
%printl(obj2.something_global)