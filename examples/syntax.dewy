%%%%%%%%%%%%%%% STRING INTERPOLATION %%%%%%%%%%%%%%%

%{Todo: probably break each section for different syntaxes into different files?}%

%silly example with keyword vs identifier
loop i i

r'this is a raw string \'  expr  'a separate string later'

% simple blocks
{   }
( %{comment inside}% )
{ 2+2 }
( 2+2 )


%string interpolation
my_string = '2 + 2 = {2+2}'

%complex interpolation
s = "first 10 primes are: {
    primes = [2]
    loop i in [3, 5..) and primes.length <? 10
        if i .% primes |> product not =? 0 
            primes.push(i)
    primes
}"


%alternative prime generator + getting first 10 primes
#ctx
primes = [
    2
    lazy i in [3, 5..)
        if i .% #ctx.primes .=? 0 |> @reduce(, (prev, v) => prev and v)
            i
][..10)

%TBD if there is a parallel way to do this where the i .% primes dispatches each operation, and fails immediately on any returning false
#label
primes = [
    2
    lazy i in [3, 5..)
        if not parallel_or(p => i % p =? 0, #label.primes)
            i
][..10)
%parallel or is like goroutines with cancel once any is true...should have it be more flexible, e.g. able to use any of the boolean keywords that can short circuit
%actually probably don't want to need to specify that it's parallel. Instead if there's an operation over a vector, it gets parallelized if possible.

%nested interpolation
s2 = 'this is an outer string, and {'this is an interior string with "{my_string}" in it'}'





const add = (a:int b:int): int => { %{return sum of a and b}% }
let div = (a:real b:real): real? => { %{return a / b}% }

% function type with named default argument
my_func = (s:string kwarg:bool=false): void => {}

%you probably can do the verbose version as well (probably useful for when you're just defining the interface without the implementation)
my_func: (s:string kwarg:bool=false): void



% example annotations for function types
() => ()
() => void
() => bool
int => bool
a: int => bool
(int int) => int
<T>(T T) => T
<T>(a:T b:T) => T

% object type
[a:int? b:string]

%? (optional) is sugar for |void
[a:int|void b:string]

% operators juxtaposed to identifiers
aorb
a or b
a+b


%based number literals
0b1010_0011_0101_0110_1001_1010_1100_1111
0B0101_1111_1010_1110_0011_0101_1001_1100

0t012_221_012_221_012_221_012_221
0t211_001_211_001_211_001_211_001

0q331_231_223_131_331_231_223_131
0Q123_321_123_321_123_321_123_321

0s123_450_123_450_123_450_123_450
0S543_210_543_210_543_210_543_210

0o123_456_701_234_567_012_345_670
0O012_345_670_123_456_701_234_567

0d123_456_789_012_345_678_901_234
0D987_654_321_098_765_432_109_876

0z123_456_789_xe0_123_456_789_xe0
0ZEX9_876_543_210_987_654_321_09E

0x1234_5678_9abc_def0_1234_5678_9abc_def0
0XFEDC_BA98_7654_3210_fedc_ba98_7654_3210

0u0123456789abcdefghijklmnopqrstuv0123456
0UVUTSRQPONMLKJIHGFEDCBA9876543210vutsrq

0r0123456789abcdefghijklmnopqrstuvwxyz012345
0RZYXWVUTSRQPONMLKJIHGFEDCBA9876543210zyxwv

0y0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$
0Y$!ZYXWVUTSRQPONMLKJIHGFEDCBA9876543210zyxwvutsrqponmlkjihgfedcba

%Units TODO




[a b c] = [1 2 3]                                       %a=1, b=2, c=3
[a [b c]] = [1 [2 3]]                                   %a=1, b=2, c=3
[a [b c] d] = [1 [2 3] 4]                               %a=1, b=2, c=3, d=4
[a ...b] = [1 2 3 4]                                    %a=1, b=[2 3 4]
[a ...b c] = [1 2 3 4 5]                                %a=1, b=[2 3 4], c=5
[a ...b [c [...d e f]]] = [1 2 3 4 [5 [6 7 8 9 10]]]    %a=1, b=[2 3 4], c=5, d=[6 7 8], e=9, f=10



% silly things that are technically valid
x = loop i in [0..10] i %x=10

y = [
    if something 
        x
    else loop i in something_else
        y
    else if z
        z
    else loop i in last_thing
        w
    else
        ()
]


apple & banana
apple&banana
apple | banana
apple|banana





%%%%%%%%%%%%%%% String prefixes %%%%%%%%%%%%%%%
p = s:string => [
    %process s based on / and \ separators
    %store result in this object
    route:array<string> = ...
    filename:string? = ...
    extension:string? = ...
]

p"this/is/a/file/path.ext"

%other prefixes
re"[^i*&2@]"                            % regex literal
t'my_token'                             %token literal. probably my version of enums
r'this is a raw string'                 %raw string. technically handled during tokenizing, there is no r function
(dewy)r'''printl("Hello, World!")'''    %dewy source code literal. uses raw string so that we don't have to worry about {}.

ipa"ɛt vɔkavit dɛus aɾidam tɛɾam kɔngɾɛgatsiɔnɛskwɛ akwaɾum apɛlavit maɾia ɛt vidit dɛus kwɔd ɛsɛt bɔnum" %international phonetic alphabet literal
(apl)r"life ← {⊃1 ⍵ ∨.∧ 3 4 = +/ +⌿ ¯1 0 1 ∘.⊖ ¯1 0 1 ⌽¨ ⊂⍵}"  %apl expression literal
apl<|r"life ← {⊃1 ⍵ ∨.∧ 3 4 = +/ +⌿ ¯1 0 1 ∘.⊖ ¯1 0 1 ⌽¨ ⊂⍵}"  %same as above

'''this is a regular string with triple quotes'''
"""this is a regular string with triple quotes"""

%%%%%%%%%%%%%%% object prefixes %%%%%%%%%%%%%%%
%doubly linked list
dll[1 2 3 4 6 5 3 6 3 2]
@linked_list(double=true)[1 2 3 4 6 5 3 6 3 2]

%set literal syntax
set[4 3 6 4 6 4 2 2 4 5]



% silly example for generating a list of ones
ones = n => {l = [...[1..n]] l.=1 l}
ones(10) % [1 1 1 1 1 1 1 1 1 1]
%alternate
ones = n => [loop i in 1..n 1]