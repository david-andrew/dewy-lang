%{ 
    Dewy Docs mdbook preprocessor:
    find code blocks labelled 'dewy' or 'dewy, editable' and convert them to iframes
}%

#main = () => {
    % mdbook calls preprocessor twice, first with args ["supports", <renderer>], 
    % and then if the first call exited with 0, the actual preprocessor run occurs
    % ignore the second argument (meaning support for all renderers)
    if sys.argv.length >? 1 and sys.argv[1] =? "supports"
        sys.exit(0)

    % get and parse the json input from stdin
    % TODO: need to make a json parser
    context, book = parse_json(read())

    loop section in book['sections']
    {
        section['Chapter']['content'] |>= process_markdown

        loop subitem in section['Chapter']['sub_items']
            subitem['Chapter']['content'] |>= process_markdown

        print(dump_json(book))
    }
}


counter = iter[0..]
process_markdown = (input_markdown) => {
    lines = input_markdown.split('\n')

    % lines starting with ```dewy
    starts = [
        loop i in [0..] and line in lines 
            if line[..6] =? '```dewy' 
                i
    ]

    % early return if no dewy code blocks
    if starts.length =? 0
        return input_markdown

    % ```dewy lines that are followed by ', editable' (whitespace invariant)
    editables = [
        loop i in starts
        {
            remainder = lines[i][7..].strip
            remainder[0] = ',' and remainder[1..].strip =? 'editable'
        }
    ]

    % match closing ``` lines
    stops = [
        loop i in starts
            loop line in lines[i..]
                if line =? '```'
                {
                    j
                    break
                }
    ]

    if starts.length not=? stops.length
        printl'Error: mismatched dewy code block starts and ends'
        sys.exit(1)

    return [
        loop 
            start in starts 
            and stop in stops 
            and editable in editables
            and prev_stop in [0 ...(stops.+1)]
        {
            %push the previous non-code block content
            if start >? prev_stop
                lines[prev_stop..start).join('\n')

            i = next(counter) % to give each iframe a unique id
            page = if editable 'demo_only' else 'src_only'
            code = lines(start..stop).join('\n')
            encoded_code = url_quote(code)
            
            % push the iframe replacement
            f'
                <iframe
                    src="https://david-andrew.github.io/iframes/dewy/{page}?src={encoded_code}&id=DewyIframe{i}"
                    style="width: 100%; border-radius: 0.5rem;"
                    id="DewyIframe{i}"
                    frameBorder="0"
                ></iframe>
            '
        }

        % push the last non-code block content
        if stops[-1]+1 <? lines.length
            lines[stops[-1]+1..].join('\n')
 
    ].join('\n')
}


%TODO: implement these functions
let parse_json = () => {}
let dump_json = () => {}
let url_quote = () => {}
let f = () => {}