//Dewy example of the FizzBuzz problem

loop i in 1:100
{
	if i%3 =? 0 or i%5 =? 0
	{
		if i%3 =? 0 printf('Fizz')
		if i%5 =? 0 printf('Buzz')
		print()
	}
	else print(i)
}


//chances are, theres a built in function that makes this nicer (i.e. factors, returns the list of factors of a number)

//alternatively use the ternary operator (still figuring out a good syntax)

//print('{}{}{}' if i%3=?0 'Fizz' else '', if i%5=?0 'Buzz' else '', if i%3 or i%5 =? 0 i else '' )

//print('{}' if i%3 and i%5 not? 0 i else (if i%3 =? 0 'Fizz' else '') + (if i%5 =? 0 'Buzz' else ''))

/{
	s = ''
	if i%3 =? 0 s += 'Fizz'
	if i%5 =? 0 s += 'Buzz'
	if s.length() >? 0 s += i
	print(s)
}/


/{
	if i%3 =? 0 printf('Fizz')
	if i%5 =? 0 printf('Buzz')
	if printf.position =? 0 printf(i)	//check the current cursor position to see if anything was printed
	print()
}/


//this is probably bad, because it is capturing values, but also expecting them to pass through...
//print('{}' if (if i%3 =? 0 'Fizz' + if i%5 =? 0 'Buzz') else i)



//Best implementation
//easily change the numbers checked, and add more words
words = [3 -> "Fizz" 5 -> "Buzz"] // 7->"Bazz"]

loop i in 1:100
{
	say = i .mod words.keys .=? 0		//elementwise operation of % and =? //returns truth table
	if words.keys[say].length >? 0
	{
		loop word in words[words.keys[say]]
			printf(word)
	}
	else printf(i)
	print()
}
